"""-*-python-*-
suggested use:
place a dotted symlink to this
file in your home directory
  ln -s /.../pythonrc ~/.pythonrc
and set the environment variable
PYTHONSTARTUP
to the symlink
export PYTHONSTARTUP="${HOME}/.pythonrc"
see also:
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP
"""

from collections import (
    namedtuple,
)
from datetime import (
    datetime as dto,
    timedelta,
)
from functools import (
    reduce,
    wraps,
)
from inspect import (
    getmembers as gm,
    getsource,
    getsourcefile as gsf,
    getmodule,
)
from operator import (
    add,
    itemgetter as ig,
    attrgetter,
)
import os
import sys
import os.path as pth
from pprint import (
    pp,
)
import pydoc

###
if sys.prefix == sys.base_prefix:
    raise Exception("not in venv")

class ImportBlocker(object):
    def __init__(self):
        self.module_names = set()
        self.package_names = set()

    def find_module(self, fullname, path=None):
        if fullname.split('.')[0] in self.package_names:
            return self
        if fullname in self.module_names:
            return self
        return None

    def exec_module(self, mdl):
        # return an empty namespace
        return {}

    def create_module(self, spec):
        return None
 

import_blocker = ImportBlocker()
sys.meta_path.append(import_blocker)

"""
import_blocker.package_names.add('chickenlib')
import chickenlib
print(vars(chickenlib))
breakpoint()
"""




"""
from importlib.abc import MetaPathFinder, Loader

class IgnoredImportLoader(Loader):
    def create_module(self, spec):
        return None
    def exec_module(self, mdl):
        # return an empty namespace
        return {}



class IgnoredImportFinder(MetaPathFinder):
    def find_module(self, fullname, path=None):
        breakpoint()
        if fullname in _ignore_import_modules:
            return IgnoredImportLoader()
        return None
"""
#breakpoint()

#sys.meta_path = [IgnoredImportFinder()]
#sys.meta_path.append(IgnoredImportFinder())
#sys.meta_path = [IgnoredImportFinder()] + sys.meta_path

def my_except_hook(exctype, value, traceback):
    if exctype is KeyboardInterrupt:
        print("see you later!")
    sys.__excepthook__(exctype, value, traceback)



sys.excepthook = my_except_hook

while True:
    try:
        import toolz
        from toolz.functoolz import (
            compose,
            curry,
            flip,
            juxt,
        )
        from toolz.itertoolz import (
            accumulate,
            concat,
            concatv,
            diff,
            isdistinct,
            nth,
            unique,
        )
        import numpy as np
        sys.path.append(os.path.dirname(os.path.realpath(__file__)))
        import pyutils
        sys.path.pop()
    except ModuleNotFoundError as err:
        import_blocker.package_names.add(err.name)
        # breakpoint()
        # _uninstalled_modules.add(err.name)
        continue
    break
        

# reset to orig
#sys.excepthook = sys.__excepthook__




uninstalled_packages = import_blocker.package_names.copy()
if uninstalled_packages:
    print("uninstalled packages")
    print(uninstalled_packages)

###


def gmn(*args, **kwargs):
    return [m[0] for m in gm(*args, **kwargs)]


def gs(*args, **kwargs):
    pydoc.pager(getsource(*args, **kwargs))



